<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a5" title="">
  <file path="models/question_model.php" hash="e635a725aebb532aa30125c19b8462bf" package="Default">
    <class final="false" abstract="false" namespace="" line="15" package="models">
      <name>Question_model</name>
      <full_name>\Question_model</full_name>
      <extends>CI_Model</extends>
      <docblock line="15">
        <description><![CDATA[the question model]]></description>
        <long-description><![CDATA[<p>Provides CRUD functionality for questions.</p>

<p>It uses the following database tables:</p>

<ul>
<li><em>Question</em></li>
<li><em>Answer</em> (read only)</li>
</ul>]]></long-description>
        <tag line="15" name="package" description="models"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="43" package="models">
        <name>get_list</name>
        <full_name>get_list</full_name>
        <docblock line="43">
          <description><![CDATA[retrieve a sorted and paginated question list]]></description>
          <long-description><![CDATA[<p>Returns all comments for a question, providing the <em>userName</em> of the commenter and the <em>body</em> of the comment.</p>

<p>The array <em>$filter</em> can be used to filter the result according to certain criteria. The array may contain the following keys:</p>

<ul>
<li>userID: show only questions posted by a certain user id</li>
<li>catID: show only questions in a specific category id</li>
<li>fieldID: show only questions of a category that belong to a specific field id</li>
<li>search: a search term as a string. Words separated by a whitespace are ANDed.</li>
</ul>

<p><strong>Usage Example</strong>:
get the first 10 questions matching the terms <em>php</em> and <em>apache</em> :</p>

<blockquote>
  <p>get_list(0, 10, array('search'=>'php apache'))
  get the questions 6-10 with <em>catId</em> 4
  get_list(5, 10, array('category'=>4))</p>
</blockquote>]]></long-description>
          <tag line="43" name="param" description="the pagination offset" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="43" name="param" description="the amount of questions to retrieve" type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="43" name="param" description="the optional filter to be applied to the results" type="array" variable="$filter">
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="return" description="holds question objects with a questionID and its title" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$limit</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$filter</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="60" package="models">
        <name>get_count</name>
        <full_name>get_count</full_name>
        <docblock line="60">
          <description><![CDATA[count the questions matching a certain filter.]]></description>
          <long-description><![CDATA[<p>the total amount of questions matching the filter criteria. see get_list documentation for details.</p>]]></long-description>
          <tag line="60" name="param" description="the optional filter, see the get_list documentation" type="array" variable="$filter">
            <type by_reference="false">array</type>
          </tag>
          <tag line="60" name="return" description="the amount of questions matching $filter" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$filter</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="74" package="models">
        <name>get_details</name>
        <full_name>get_details</full_name>
        <docblock line="74">
          <description><![CDATA[all the information about one question.]]></description>
          <long-description><![CDATA[<p>the total amount of questions matching the filter criteria. see get_list documentation for details.</p>]]></long-description>
          <tag line="74" name="param" description="the questionID" type="int" variable="$qid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="74" name="return" description="a single question object, containing column values as attributes." type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$qid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="89" package="models">
        <name>filter</name>
        <full_name>filter</full_name>
        <docblock line="89">
          <description><![CDATA[create a filter for the where-clause]]></description>
          <long-description><![CDATA[<p>A private function used by <em>get_count</em> and <em>get_list</em>. It takes the $filter$ array (as described in the <em>getlist</em> documentation)
It executes active record functions to qualify the query.</p>]]></long-description>
          <tag line="89" name="param" description="the filter, see the get_list documentation" type="array" variable="$filter">
            <type by_reference="false">array</type>
          </tag>
          <tag line="89" name="return" description="no return value" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$filter</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="90">implement the filter function so that it works as documented.</todo>
    </markers>
  </file>
  <file path="models/user_model.php" hash="5c7ac40359242f08636a88a985c6cda0" package="Default">
    <class final="false" abstract="false" namespace="" line="16" package="models">
      <name>User_model</name>
      <full_name>\User_model</full_name>
      <extends>CI_Model</extends>
      <docblock line="16">
        <description><![CDATA[the user model]]></description>
        <long-description><![CDATA[<p>User management. CRUD for users, their types and their fields.</p>

<p>It uses the following database tables:</p>

<ul>
<li><em>User</em></li>
<li><em>UserType</em> (read only)</li>
</ul>]]></long-description>
        <tag line="16" name="package" description="models"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="31" package="models">
        <name>login</name>
        <full_name>login</full_name>
        <docblock line="31">
          <description><![CDATA[Checks if the username exists]]></description>
          <long-description><![CDATA[<p>The <em>$name</em> is compared to the <em>userName</em> in User table.</p>

<p>The <em>$password</em> is compared if it is eqaul to that userName's password.</p>]]></long-description>
          <tag line="31" name="author" description="Huma Yari"/>
          <tag line="31" name="param" description="The username" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="param" description="The password" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="return" description="the userID if exits or 0" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$password</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="54" package="models">
        <name>delete_user</name>
        <full_name>delete_user</full_name>
        <docblock line="54">
          <description><![CDATA[Deletes a user]]></description>
          <long-description><![CDATA[<p>The given userID is compared to the <em>userID</em> of the User table.</p>

<p>The user will be deleted if that userID is found.</p>]]></long-description>
          <tag line="54" name="author" description="Huma Yari"/>
          <tag line="54" name="param" description="The userID" type="int" variable="$uid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="54" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="70" package="models">
        <name>add_user</name>
        <full_name>add_user</full_name>
        <docblock line="70">
          <description><![CDATA[adding new user]]></description>
          <long-description><![CDATA[<p>adding new user in the User table with initial data *(username,password and email address)</p>]]></long-description>
          <tag line="70" name="author" description="ASHUQULLAH ALIZAI"/>
          <tag line="70" name="param" description="is the username for the user" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="is password specified by user" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="is email specified by user" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="return" description="inserted userID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$password</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$email</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="97" package="models">
        <name>check_userName</name>
        <full_name>check_userName</full_name>
        <docblock line="97">
          <description><![CDATA[checking the existancy of userName]]></description>
          <long-description><![CDATA[<p>checks if the userName exist on the user table</p>]]></long-description>
          <tag line="97" name="author" description="ASHUQULLAH ALIZAI"/>
          <tag line="97" name="param" description="is the user name for user who wants to register for first time *private function _check_userName checks if usename exists or not ," type="\string_type" variable="$username">
            <type by_reference="false">\string_type</type>
          </tag>
          <tag line="97" name="return" description="false if username exist in the database, retruns true if the username not exist" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="97" name="return" description="userID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$username</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="106" package="models">
        <name>update_user</name>
        <full_name>update_user</full_name>
        <argument line="106">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="106">
          <name>$user_data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="112" package="models">
        <name>get_userdata</name>
        <full_name>get_userdata</full_name>
        <argument line="112">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="127" package="models">
        <name>change_usertype</name>
        <full_name>change_usertype</full_name>
        <argument line="127">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$utid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="139" package="models">
        <name>get_usertypes</name>
        <full_name>get_usertypes</full_name>
        <docblock line="139">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="149" package="models">
        <name>get_usertype</name>
        <full_name>get_usertype</full_name>
        <docblock line="149">
          <description><![CDATA[it is to return usertype]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="149">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="153" package="models">
        <name>get_field</name>
        <full_name>get_field</full_name>
        <argument line="153">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="58">implement the add_user function. A new unconfirmed user (userTypeID=0) is created with the given parameters. Set the accountCreationDate to the current date. Document the function using phpdoc.</todo>
      <todo line="105">Find out how the update_user() function can be used. Then document it using phpdoc. Use question_model::get_list() as an example.</todo>
      <todo line="111">This function should return the user object for the user with id $uid. Additionally to the data from the User table, it should contain the users category (userType) and field (fieldName). Create phpdoc for this function. Note: you will also need to update the class' phpdoc.'</todo>
      <todo line="126">implement change_usertype() so it changes the user specified by $uid to category number $utid. Document this function and get_usertypes using phpdoc.</todo>
      <todo line="144">implement and document get_usertype() and get_field(). Both return a single integer indicating the usertypeID or fieldID of the user.</todo>
    </markers>
    <parse_markers>
      <error line="106" code="50010">No DocBlock was found for method update_user()</error>
      <error line="112" code="50010">No DocBlock was found for method get_userdata()</error>
      <error line="127" code="50010">No DocBlock was found for method change_usertype()</error>
      <error line="139" code="50012">No short description for method get_usertypes()</error>
      <error line="149" code="50015">Argument $uid is missing from the Docblock of get_usertype()</error>
      <error line="153" code="50010">No DocBlock was found for method get_field()</error>
    </parse_markers>
  </file>
  <file path="models/field_model.php" hash="be13dd48d5d17cb195e3eb14629b1f8b" package="Default">
    <class final="false" abstract="false" namespace="" line="13" package="models">
      <name>Field_model</name>
      <full_name>\Field_model</full_name>
      <extends>CI_Model</extends>
      <docblock line="13">
        <description><![CDATA[the Field_model]]></description>
        <long-description><![CDATA[<p>Provides the following functions:
_get_fields(): returns the field recoreds from table _Field.
_add_field($fieldName): insert a new field recored to table _Field.
_delete_field($fieldID): deletes a record from table _Field.
It uses the table _Field.</p>]]></long-description>
        <tag line="13" name="package" description="models"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="21" package="models">
        <name>get_fields</name>
        <full_name>get_fields</full_name>
        <docblock line="21">
          <description><![CDATA[retrives all records from table Field as record objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="none" type="" variable=""/>
          <tag line="21" name="return" description="holds fields objects with fieldIDs and fieldNames." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="32" package="models">
        <name>add_field</name>
        <full_name>add_field</full_name>
        <docblock line="32">
          <description><![CDATA[insert a given fieldName into table _Field.]]></description>
          <long-description><![CDATA[<p>fieldname: can be a string that indicates area of study or profession of a user.</p>]]></long-description>
          <tag line="32" name="param" description="" type="string" variable="$fieldName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$fieldName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="45" package="models">
        <name>delete_field</name>
        <full_name>delete_field</full_name>
        <docblock line="45">
          <description><![CDATA[Deletes a specific record from table _Field that matches the given fieldID.]]></description>
          <long-description><![CDATA[<p>fieldID: can be an integer that has beent from coller function.</p>]]></long-description>
          <tag line="45" name="param" description="" type="int" variable="$fieldID">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$fieldID</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <notice line="21" code="50013">Parameter  could not be found in get_fields()</notice>
    </parse_markers>
  </file>
  <file path="models/category_model.php" hash="8030749f5f2237ca4b669975fa1ce0e9" package="Default">
    <class final="false" abstract="false" namespace="" line="21" package="models">
      <name>Category_model</name>
      <full_name>\Category_model</full_name>
      <extends>CI_Model</extends>
      <docblock line="21">
        <description><![CDATA[The category model]]></description>
        <long-description><![CDATA[<p>This model allows us to add, update, retrieve and delete category from category table.</p>

<p>It uses the following database:</p>

<ul>
<li><em>goftogo</em></li>
<li><em>User</em> (read only)</li>
</ul>

<p>It uses the following tables of goftogo database:</p>

<ul>
<li><em>Category</em></li>
<li><em>User</em> (read only)</li>
</ul>]]></long-description>
        <tag line="21" name="package" description="models"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="34" package="models">
        <name>add_cat</name>
        <full_name>add_cat</full_name>
        <docblock line="34">
          <description><![CDATA[Add new category.]]></description>
          <long-description><![CDATA[<p>This function will add new category to the Category tables and a specified field table Category tables.</p>]]></long-description>
          <tag line="34" name="author" description="Abdulaziz Akbary"/>
          <tag line="34" name="param" description="the catName, means category-Name." type="string" variable="$catName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="the fieldID, means field-ID." type="int" variable="$fieldID">
            <type by_reference="false">int</type>
          </tag>
          <tag line="34" name="return" description="containing a category ID." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$catName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$fieldID</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="53" package="models">
        <name>update_cat</name>
        <full_name>update_cat</full_name>
        <docblock line="53">
          <description><![CDATA[Update category.]]></description>
          <long-description><![CDATA[<p>This function is used to update previouse existed category in a Category tables.</p>]]></long-description>
          <tag line="53" name="author" description="Abdulaziz Akbary"/>
          <tag line="53" name="param" description="the catID, means category-ID." type="int" variable="$catID">
            <type by_reference="false">int</type>
          </tag>
          <tag line="53" name="param" description="the catName, means category-Name." type="string" variable="$catName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="return" description="containing a category ID." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$catID</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$catName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="71" package="models">
        <name>get_categories</name>
        <full_name>get_categories</full_name>
        <docblock line="71">
          <description><![CDATA[Retrieving all category.]]></description>
          <long-description><![CDATA[<p>This function will return all categories belongs to a specific field from Category tables.</p>]]></long-description>
          <tag line="71" name="author" description="Abdulaziz Akbary"/>
          <tag line="71" name="param" description="the fieldID, means field-ID." type="int" variable="$fieldID">
            <type by_reference="false">int</type>
          </tag>
          <tag line="71" name="return" description="containing all columns and rows of Category table." type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$fieldID</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="88" package="models">
        <name>delete_cat</name>
        <full_name>delete_cat</full_name>
        <docblock line="88">
          <description><![CDATA[Delete a category.]]></description>
          <long-description><![CDATA[<p>This function is used to delete a specific category from a Category tables.</p>]]></long-description>
          <tag line="88" name="author" description="Abdulaziz Akbary"/>
          <tag line="88" name="param" description="the catID, means category-ID." type="int" variable="$catID">
            <type by_reference="false">int</type>
          </tag>
          <tag line="88" name="return" description="" type="Void">
            <type by_reference="false">Void</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$catID</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="models/comment_model.php" hash="50a03f7181f7e7bce3e3574c6570c572" package="Default">
    <class final="false" abstract="false" namespace="" line="16" package="models">
      <name>Comment_model</name>
      <full_name>\Comment_model</full_name>
      <extends>CI_Model</extends>
      <docblock line="16">
        <description><![CDATA[the comment model]]></description>
        <long-description><![CDATA[<p>Allows to retrieve and post comments for questions and answers.</p>

<p>It uses the following database tables:</p>

<ul>
<li><em>Comment</em></li>
<li><em>User</em> (read only)</li>
</ul>]]></long-description>
        <tag line="16" name="package" description="models"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="28" package="models">
        <name>get_qcomments</name>
        <full_name>get_qcomments</full_name>
        <docblock line="28">
          <description><![CDATA[retrieve comments for a question]]></description>
          <long-description><![CDATA[<p>Returns all comments for a question, providing the <em>userName</em> of the commenter and the <em>body</em> of the comment.</p>]]></long-description>
          <tag line="28" name="param" description="the questionID" type="int" variable="$qid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="28" name="return" description="holds comment objects with userName and body properties" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$qid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="45" package="models">
        <name>get_acomments</name>
        <full_name>get_acomments</full_name>
        <docblock line="45">
          <description><![CDATA[retrieve comments for an answer]]></description>
          <long-description><![CDATA[<p>Returns all comments for an answer, providing the <em>userName</em> of the commenter and the <em>body</em> of the comment.</p>]]></long-description>
          <tag line="45" name="param" description="the answerID" type="int" variable="$aid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="45" name="return" description="holds comment objects with userName and body properties" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$aid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="66" package="models">
        <name>create_qcomment</name>
        <full_name>create_qcomment</full_name>
        <docblock line="66">
          <description><![CDATA[adds a question comment to the Comment table of database]]></description>
          <long-description><![CDATA[<p>You will pass 3 parameter qid,uid,body it means questionID,userID and body to Comment table in database.
after inserting successfully all parameter to the database, commentID will be return from database</p>]]></long-description>
          <tag line="66" name="author" description="Abdul Razzaq"/>
          <tag line="66" name="param" description="the questionID" type="int" variable="$qid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="66" name="param" description="the userID" type="int" variable="$uid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="66" name="param" description="the body" type="int" variable="$body">
            <type by_reference="false">int</type>
          </tag>
          <tag line="66" name="return" description="commentID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$qid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$body</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="88" package="models">
        <name>create_acomment</name>
        <full_name>create_acomment</full_name>
        <docblock line="88">
          <description><![CDATA[adds a answer comment to the Comment table of database]]></description>
          <long-description><![CDATA[<p>You will pass 3 parameter aid,uid,body it means answerID,userID and body to Comment table in database.
after inserting successfully all parameter to the database, commentID will be return from database</p>]]></long-description>
          <tag line="88" name="author" description="Abdul Razzaq"/>
          <tag line="88" name="param" description="the answerID" type="int" variable="$aid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="88" name="param" description="the userID" type="int" variable="$uid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="88" name="param" description="the body" type="int" variable="$body">
            <type by_reference="false">int</type>
          </tag>
          <tag line="88" name="return" description="commentID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$aid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="88">
          <name>$uid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="88">
          <name>$body</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="105" package="models">
        <name>update_comment</name>
        <full_name>update_comment</full_name>
        <docblock line="105">
          <description><![CDATA[Update Comments by id]]></description>
          <long-description><![CDATA[<p>this function will update the comment body.</p>]]></long-description>
          <tag line="105" name="param" description="the commentID" type="int" variable="$cid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="105" name="param" description="the body" type="string" variable="$body">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$cid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="105">
          <name>$body</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="124" package="models">
        <name>delete_comment</name>
        <full_name>delete_comment</full_name>
        <docblock line="124">
          <description><![CDATA[Delete Comments by id]]></description>
          <long-description><![CDATA[<p>this function will delete the comment.</p>]]></long-description>
          <tag line="124" name="param" description="the commentID" type="int" variable="$cid">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$cid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="95">Implement update_comment so that it updates the body of the comment specified by $cid. Then implement delete_comment so that it deletes the comment specified by $cid. Create documentation for both functions, using phpdoc comments. See get_acomments for an example.</todo>
    </markers>
  </file>
  <file path="models/answer_model.php" hash="d312a3b7865b3328b9235b946c0345a4" package="Default">
    <class final="false" abstract="false" namespace="" line="14" package="models">
      <name>Answer_model</name>
      <full_name>\Answer_model</full_name>
      <extends>CI_Model</extends>
      <docblock line="14">
        <description><![CDATA[the answer model]]></description>
        <long-description><![CDATA[<p>Provides CRUD functionality for answers.</p>

<p>It uses the following database tables:</p>

<ul>
<li><em>Answer</em></li>
</ul>]]></long-description>
        <tag line="14" name="package" description="models"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="25" package="models">
        <name>get_answers</name>
        <full_name>get_answers</full_name>
        <docblock line="25">
          <description><![CDATA[return the answers for a question]]></description>
          <long-description><![CDATA[<p>the total amount of questions matching the filter criteria. see get_list documentation for details.</p>]]></long-description>
          <tag line="25" name="param" description="the id of the question we want answers for" type="int" variable="$qid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="25" name="return" description="holds answer objects with fileds for all database columns" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$qid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="controllers/util.php" hash="5258aab63923c523ee0799d797d73d88" package="Default">
    <class final="false" abstract="false" namespace="" line="11" package="controllers">
      <name>Util</name>
      <full_name>\Util</full_name>
      <extends>CI_Controller</extends>
      <docblock line="11">
        <description><![CDATA[Utility controller]]></description>
        <long-description><![CDATA[<p>a controller containing utility functions. It uses no views but sends the user back to the last URI saved in the session.
e.g. used for changing the language globally.</p>]]></long-description>
        <tag line="11" name="package" description="controllers"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="20" package="controllers">
        <name>lang</name>
        <full_name>lang</full_name>
        <docblock line="20">
          <description><![CDATA[Load a language]]></description>
          <long-description><![CDATA[<p>Changing the language my setting the session variable language.</p>]]></long-description>
          <tag line="20" name="param" description="the language to load, named like the folder containing the language files" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="20">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="controllers/main.php" hash="9d15ef1456763d3834e826908a62f740" package="Default">
    <class final="false" abstract="false" namespace="" line="11" package="controllers">
      <name>Main</name>
      <full_name>\Main</full_name>
      <extends>CI_Controller</extends>
      <docblock line="11">
        <description><![CDATA[the main controller]]></description>
        <long-description><![CDATA[<p>Handles the basic site functionality. Browsing questions and answers, etc.</p>]]></long-description>
        <tag line="11" name="package" description="controllers"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="20" package="controllers">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="20">
          <description><![CDATA[constructor]]></description>
          <long-description><![CDATA[<p>loads question_model, answer_model, main_lang.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="42" package="controllers">
        <name>_loadviews</name>
        <full_name>_loadviews</full_name>
        <docblock line="42">
          <description><![CDATA[private helper function to build view]]></description>
          <long-description><![CDATA[<p>every complete html-page sent to the client is constructed here.</p>

<p>The following parts are sent in order:</p>]]></long-description>
          <tag line="42" name="param" description="what should appear in the body" type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="param" description="The data array to pass on to the views" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="56" package="controllers">
        <name>home</name>
        <full_name>home</full_name>
        <docblock line="56">
          <description><![CDATA[home view]]></description>
          <long-description><![CDATA[<p>this is where the default route and the home links will point to.
it just calls an appropriate function.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="71" package="controllers">
        <name>questions</name>
        <full_name>questions</full_name>
        <docblock line="71">
          <description><![CDATA[show a list of questions]]></description>
          <long-description><![CDATA[<p>the paginated <em>qlist</em> view is shown, representing a clickable list of questions.
clicking on a question will display its details (answers, etc.)</p>]]></long-description>
          <tag line="71" name="param" description="the pagination offset" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="71" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="82" package="controllers">
        <name>field</name>
        <full_name>field</full_name>
        <argument line="82">
          <name>$fid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="86" package="controllers">
        <name>search</name>
        <full_name>search</full_name>
        <argument line="86">
          <name>$term</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="86">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="100" package="controllers">
        <name>qshow</name>
        <full_name>qshow</full_name>
        <docblock line="100">
          <description><![CDATA[show one question]]></description>
          <long-description><![CDATA[<p>the <em>qdetails</em> view is shown, representing a question and its answers.</p>]]></long-description>
          <tag line="100" name="param" description="the questionID" type="int" variable="$qid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$qid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="120" package="controllers">
        <name>view</name>
        <full_name>view</full_name>
        <docblock line="120">
          <description><![CDATA[show a certain body page]]></description>
          <long-description><![CDATA[<p>this function shows a certain (static) page from the views/body directory.
use this for static content like: about, contact, terms-of-use, etc.</p>]]></long-description>
          <tag line="120" name="param" description="the name of the page (without extension) in views/body" type="string" variable="$page">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$page</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="83">implement field($fid,$offset). It should display a paginated view of all the questions that belong to categories in a field. use the already documented $filter feature of the question_model. You only need to make changes in the body of this function.</todo>
      <todo line="87">implement search($term,$offset). It should display a paginated view of the search results. use the already documented $filter feature of the question_model. You only need to make changes in the body of this function.</todo>
    </markers>
    <parse_markers>
      <error line="82" code="50010">No DocBlock was found for method field()</error>
      <error line="86" code="50010">No DocBlock was found for method search()</error>
    </parse_markers>
  </file>
  <file path="controllers/user.php" hash="4b7cdd0e69c519ae6e9c121046d40bcc" package="Default">
    <class final="false" abstract="false" namespace="" line="11" package="controllers">
      <name>User</name>
      <full_name>\User</full_name>
      <extends>CI_Controller</extends>
      <docblock line="11">
        <description><![CDATA[the user controller]]></description>
        <long-description><![CDATA[<p>Handles logging in and registering users.</p>]]></long-description>
        <tag line="11" name="package" description="controllers"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="19" package="controllers">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="19">
          <description><![CDATA[constructor]]></description>
          <long-description><![CDATA[<p>loads: user_model, main_lang</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="39" package="controllers">
        <name>_loadviews</name>
        <full_name>_loadviews</full_name>
        <docblock line="39">
          <description><![CDATA[private helper function to build view]]></description>
          <long-description><![CDATA[<p>This loads views for the registration, failed-login, etc. screens</p>]]></long-description>
          <tag line="39" name="param" description="what should appear as content" type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="The data array to pass on to the views" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="39" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="39">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="65" package="controllers">
        <name>login</name>
        <full_name>login</full_name>
        <docblock line="65">
          <description><![CDATA[function for user login:]]></description>
          <long-description><![CDATA[<p>This function check the following condition, and perform the task</p>

<ul><li> Getting values (username, password) from login form and checking it in database
   also login form have an optional checkbox field (remember) this function also check
   if someone checked this remember  checkbox, so it will create a cookie on client computer
   which will be exist till 3 days, otherwise cookies will be delete </li>
 <li>if user login failed so a failed(username) function will be called and this failed fuction
   is counting that how much time login is failed if it was more than 3 times and new recover page
   wil open to user.</li>
 <li>if user login successfully session data will be set for this user where
   userid, username, usertype, login(true, false) will store </li>
 <li>when user data set in the sessioin the user will be redirect to the last visiting place
   which will take from session data. (last_visited)</li></ul>]]></long-description>
          <tag line="65" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="103" package="controllers">
        <name>logout</name>
        <full_name>logout</full_name>
        <docblock line="103">
          <description><![CDATA[Fuction for loging out:]]></description>
          <long-description><![CDATA[<p>Session data of the current user will unset here:</p>

<ul><li>login</li> <li>userid(uid)</li> <li>usertype</li> <li>username</li></ul>

<p>will redirect after loging out, to the last visited place</p>]]></long-description>
          <tag line="103" name="param" description="void" type="\:" variable="">
            <type by_reference="false">\:</type>
          </tag>
          <tag line="103" name="return" description="void" type="\:">
            <type by_reference="false">\:</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="128" package="controllers">
        <name>failed</name>
        <full_name>failed</full_name>
        <docblock line="128">
          <description><![CDATA[Function to count userlogin failing:]]></description>
          <long-description><![CDATA[<p>This funciton is for counting user login failing and to show login failed page, or account recover page
It checks wheather the failed_logins variable set in the session data or not if not,
it make a failed_logins index and storing 1st time login fail or if the failed_logins
was already set in the session data it just increment it (last_value + 1)
than it set a data array to store error and username there,
This function also check if the user login failed less than 3 times it will redirect to the login_failed page
and if the login failed 3 times it will redirect user to recover page, where he/she can recoreved his/her password</p>]]></long-description>
          <tag line="128" name="Note" description=": Error message taken from Language helper class, lang('message_index'); it return the specified error&#10;message in current language."/>
          <tag line="128" name="param" description="it represent username default-value = ''" type="String" variable="$user">
            <type by_reference="false">String</type>
          </tag>
          <tag line="128" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$user</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="141" package="controllers">
        <name>register</name>
        <full_name>register</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="146" package="controllers">
        <name>recover</name>
        <full_name>recover</full_name>
        <argument line="146">
          <name>$user</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="45">Document the login(), logout() and failed() function. Change the implementation of failed() so it accepts only 3 failed password logins. After the third failed login the user should be sent to the recover page (user/recover/$username).</todo>
    </markers>
    <parse_markers>
      <notice line="103" code="50013">Parameter  could not be found in logout()</notice>
      <error line="141" code="50010">No DocBlock was found for method register()</error>
      <error line="146" code="50010">No DocBlock was found for method recover()</error>
    </parse_markers>
  </file>
  <file path="controllers/test.php" hash="4d8f3292fdba11740cf9948012b31591" package="Default">
    <class final="false" abstract="false" namespace="" line="13" package="controllers">
      <name>Test</name>
      <full_name>\Test</full_name>
      <extends>CI_Controller</extends>
      <docblock line="13">
        <description><![CDATA[the test controller]]></description>
        <long-description><![CDATA[<p>A controller for testing model.
In the wiki there is a short howto that explains the testing process
The comments in this file however should be self-explanatory.</p>]]></long-description>
        <tag line="13" name="package" description="controllers"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="16" namespace="" package="Default">
        <name>$result</name>
        <default><![CDATA[]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="24" package="controllers">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="24">
          <description><![CDATA[constructor]]></description>
          <long-description><![CDATA[<p>loads the model you want to test.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="36" package="controllers">
        <name>_remap</name>
        <full_name>_remap</full_name>
        <argument line="36">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$params</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="45" package="controllers">
        <name>_report</name>
        <full_name>_report</full_name>
        <argument line="45">
          <name>$result</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$title</name>
          <default><![CDATA['Unnamed']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="55" package="controllers">
        <name>test1</name>
        <full_name>test1</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="68" package="controllers">
        <name>test2</name>
        <full_name>test2</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="74" package="controllers">
        <name>multitest</name>
        <full_name>multitest</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="16" code="50018">No DocBlock was found for property $result</error>
      <error line="36" code="50010">No DocBlock was found for method _remap()</error>
      <error line="45" code="50010">No DocBlock was found for method _report()</error>
      <error line="55" code="50010">No DocBlock was found for method test1()</error>
      <error line="68" code="50010">No DocBlock was found for method test2()</error>
      <error line="74" code="50010">No DocBlock was found for method multitest()</error>
    </parse_markers>
  </file>
  <file path="controllers/ajax.php" hash="fa20135f02dd1601f4aed0c4996534f2" package="Default">
    <class final="false" abstract="false" namespace="" line="12" package="controllers">
      <name>Ajax</name>
      <full_name>\Ajax</full_name>
      <extends>CI_Controller</extends>
      <docblock line="12">
        <description><![CDATA[controller for AJAX requests]]></description>
        <long-description><![CDATA[<p>This controller will handle all AJAX requests up to now.
If more AJAX-functionality is added, this should be split into thematically
organized controllers.</p>]]></long-description>
        <tag line="12" name="package" description="controllers"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="14" package="controllers">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="29" package="controllers">
        <name>qcomments</name>
        <full_name>qcomments</full_name>
        <docblock line="29">
          <description><![CDATA[asynchronously get comments for a question]]></description>
          <long-description><![CDATA[<p>calls <em>get_qcomments</em> from the comment model.
presents its data using the <em>ajax/comments</em> view.</p>]]></long-description>
          <tag line="29" name="param" description="the questionID" type="int" variable="$qid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="29" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$qid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="14" code="50010">No DocBlock was found for method __construct()</error>
    </parse_markers>
  </file>
  <file path="helpers/formee_helper.php" hash="0944eccdd279a5c82829a4158dded156" package="Default">
    <constant namespace="" line="16" package="Default">
      <name>DIV_CLEAR</name>
      <full_name>\\DIV_CLEAR</full_name>
      <value><![CDATA[NULL]]></value>
    </constant>
    <function namespace="" line="11" package="Default">
      <name>formee_open</name>
      <full_name>\formee_open</full_name>
      <docblock line="11">
        <description><![CDATA[Open a Formee-form]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="11" name="param" description="Submit action URI (e.g. main/home)" type="string" variable="$action">
          <type by_reference="false">string</type>
        </tag>
        <tag line="11" name="param" description="options to pass on. class will be overwritten." type="array" variable="$options">
          <type by_reference="false">array</type>
        </tag>
        <tag line="11" name="return" description="contains html to open the form" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="11">
        <name>$action</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="11">
        <name>$options</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="24" package="Default">
      <name>formee_div</name>
      <full_name>\formee_div</full_name>
      <docblock line="24">
        <description><![CDATA[open a layout div, using Formee-layout (of12).]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="param" description="how many of 12 layout columns should the contained elements use. If 0 close a div tag." type="int" variable="$of12">
          <type by_reference="false">int</type>
        </tag>
        <tag line="24" name="param" description="clear start new row" type="bool" variable="$clear">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="24" name="return" description="contains the generated html" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="24">
        <name>$of12</name>
        <default><![CDATA[0]]></default>
        <type/>
      </argument>
      <argument line="24">
        <name>$clear</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="39" package="Default">
      <name>formee_button</name>
      <full_name>\formee_button</full_name>
      <docblock line="39">
        <description><![CDATA[create a formee submit button]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="39" name="param" description="the name and id of the button" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="39" name="param" description="the value" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="39" name="return" description="contains the generated html" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="39">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="39">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="controllers" full_name="controllers"/>
  <package name="models" full_name="models"/>
  <namespace name="" full_name=""/>
  <marker count="10">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
